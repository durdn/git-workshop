%section
  %h1{:style => "margin-top:110px"}
    Git at
    %em Spindrift
  %h4{:style => "font-size:30px; color:#fff; margin-top: -16px"}
    High Altitude and Crash
    %em Course
  #logo
  %footer
    Nicola Paolucci
    %br/
    = succeed "," do
      %em utrecht
    %time{:datetime => "2012-05-30"}
      May 30
      %sup> th
      , 2012
  %details
%section
  %hgroup{:style => "margin-top: 80px"}
    %h2 who am I?
    %p{:style => "margin-left: 120px"}
      Nicola Paolucci, 
      %a{:href => "http://twitter.com/durdn", :target => "_blank"} durdn
      on twitter, hacker and technology enthusiast,
      %br/
      %em
        git evangelist
      (apparently).
    %ul.incremental
      %li But most importantly: Diablo 3 Player.

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      %em 15 years 
      of experience in our industry, mainly in development of backend systems, web applications, ATG.
    %ul
      %li
        I started using git in a real project in 
        %em May 2008
      %li 
        More recently
        %em Branch Manager
        at DeliXL during the first big production rollout. Using
        %em git svn.
        
  %details
    %li More recently %em Branch Manager (not release manager) at DeliXL during the first big production rollout. Using git svn.
    %li Convinced Philips to switch to subversion to CVS in early 2000s
    %li Hacked a deployment system based on arch (who remembers that?)

%section
  %hgroup{:style => "margin-top: 80px"}
    %h2
      Part 1:
      %em Why
      Git?

    %p{:style => "margin-left: 120px"}
      A
      %em high level overview
      of the differences and benefits of git compared to other centralized systems

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3 Overview
    %ul
      %li 
        Branching and Merging
      %li 
        Git is
        %em fast
      %li 
        Git is
        %em distributed
      %li 
        Many possible 
        %em workflows
      %li 
        Data Assurance
      %li
        %em github
        (and bitbucket)
      %li 
        And much
        = succeed "..." do
          %em more

  %details
    http://git-scm.com/about
%section
  %hgroup{:style => "margin-top: 80px"}
    %h3 Branching and Merging
    %ul.incremental
      %li Frictionless Context Switching
      %li Role-Based Codelines
      %li Feature Based Workflow
      %li Disposable Experimentation

  %details
    http://git-scm.com/about
    %br
    Frictionless Context Switching. Create a branch to try out an idea, commit a few times, switch back to where you branched from, apply a patch, switch back to where you are experimenting, and merge it in.
    %br
    Role-Based Codelines. Have a branch that always contains only what goes to production, another that you merge work into for testing, and several smaller ones for day to day work.
    %br
    Feature Based Workflow. Create new branches for each new feature you're working on so you can seamlessly switch back and forth between them, then delete each branch when that feature gets merged into your main line.
    %br
    Disposable Experimentation. Create a branch to experiment in, realize it's not going to work, and just delete it - abandoning the workâ€”with nobody else ever seeing it (even if you've pushed other branches in the meantime).
    %br

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      git is 
      %em fast
    %ul
      %li no, really...
      %li 
        One or two orders of magnitude faster than 
        %em SVN
      %li
        Look at these
        %a{:href => "/assets/git-speed.png", :target => "_blank"} Charts

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      git is 
      %em fast
    %img{:src => "/assets/git-speed.png"}

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      git is
      %em distributed
    %ul.incremental
      %li Multiple backups
      %li Any workflow
%section
  %hgroup{:style => "margin-top: 80px"}
    %h3 Many Possible Workflows
    %ul.incremental
      %li Subversion style workflow
      %li Integration manager workflow
      %li Dictator And Lieutenants workflow
      %li 
        Some visual 
        %a{:href => "http://git-scm.com/about/distributed", :target => "_blank"}
          %em Aid

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3 Data Assurance
    %ul
      %li Cryptographic integrity of every bit of your project

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      The
      %em Staging
      Area
    %img{:src => "http://git-scm.com/images/about/index1.png",:style => "margin-left: 250px"}
    %ul
      %li Intermediate area where commits are prepared.
      %li
        Ignore this feature adding -a to your commits

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3 
      %em github
      (and Atlassian bitbucket)
    %ul
      %li De-facto standard for open source development
      %li sending pull requests is trivially easy
      %li Seamless cooperation and coordination
      %li code reviews become natural
      %li charts and visibility

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3 And I will add
    %ul
      %li
        Ability to
        %em rewrite
        and
        %em clean
        your code history
      %li
        Ability to 
        %em search
        the codebase like a
        %em pro
      %li
        Powerful, rock-solid interoperability with
        %em subversion
 
%section
  %hgroup
    %h2
      Part 2:
      %em Important
      Concepts
      and First
      %em DEMO

%section
  %hgroup{:style => "margin-top: 80px"}
  %h3 Important Concepts
  %ul.incremental
    %li Everything is local
    %li
      Git tracks content, not files
    %li Snapshots, not differences
    %li Look at these images...

%section
  %hgroup{:style => "margin-top: 80px"}
    %img{:src => "http://git-scm.com/figures/18333fig0104-tn.png",:style => "margin-left: 100px"}
    %img{:src => "http://git-scm.com/figures/18333fig0105-tn.png",:style => "margin-top:20px; margin-left: 100px"}

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3 Local File Lifecycle
    
    %ul
      %li 
        Any file can be in
        %em 3 states
      %li Committed
      %li Modified
      %li Staged

    %img{:src => "http://git-scm.com/figures/18333fig0106-tn.png",:style => "position: relative; width:300px; height:280px; margin-left: 450px; top: -300px"}
    

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3 File status lifecycle 
    %img{:src => "http://git-scm.com/figures/18333fig0201-tn.png",:style => "margin-left: 100px"}

%section
  %hgroup
  %h2 First DEMO
  %details
    %pre
      \# DEMO PART1 BASIC STUFF
      mkdir demo1
      cd demo1
      git init
      git config [--global] user.name Bob
      git config [--global] user.email bob@spindrift.com
      touch AUTHORS
      touch README
      touch LICENSE
      touch source{1,2,3,4,5,6,7,8,9}.txt
      git status
      git add source*
      git status
      git commit -m"My first commit"
      git status
      git log
      git config -l
      git config alias.ci commit
      git config alias.ls log\--oneline

      \# Ignore files in .gitignore

      git diff (--cached)
      git commit
      git rm (--cached)
      git mv
      git log niceties (-10, --oneline, --stat, --graph, --author, --since)

      \# Undoing things, important to learn

      Change the last (local) commit: git commit --amend
      Unstage a file: git reset <file>
      Undo your changes: git checkout <file>
      Difference between reset and revert
      Going back in time

      \# 2 developers setup cooperation
      git clone demo1/ demo2
      cd demo2/
      git status
      git log --oneline
      git config user.email janis@spindrift.com
      git config user.name Janis

      \# How to handle conflicts

      git pull
      git status
      [git mergetool]
      git add
      git commit

%section
  %hgroup{:style => "margin-top: 80px"}
    %h2 
      %em ALERT
    
    %p 
      I use the
      %em command line
      , I will not talk about existing graphical clients for win/osx/linux or plugins for 
      %em Eclipse
      , though they exist.

%section
  %hgroup
    %h2
      Survived The Demo?
    %h4
      And the command line galore?

%section
  %hgroup
    %h2 
      Part 3:
      %em Branches
      And Real World Usage
      %em DEMO

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      What is a Git
      %em Branch
    %ul.incremental
      %li
        still only talking about
        %em local
        branches
      %li 
        first let's review what is a commit. see
        %a{:href => "http://git-scm.com/figures/18333fig0301-tn.png", :target => "_blank" } image

      %li
        A branch is simply a lightweight 
        %em movable pointer
        to a commit. see 
        %a{:href => "http://git-scm.com/figures/18333fig0303-tn.png", :target => "_blank" } image
  %details
    http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is

    Git repository now these objects: one blob for the contents of each of your three files, one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.

%section
  %hgroup
  %h2 DEMO 2: (Local) Branches and Real World Workflow
  %details
    %pre

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3 Points to remember
    %ul
      %li 
        Always start by creating 
        %em local
        branches
      %li
        Prefer
        %em rebase
        to merge in short lived branches
      %li Handling conflicts is easy


%section
  %hgroup
    %h2
      So Far Everything Was
      %em Local
    %h4
      We want remote repositories and distributed work!

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      Remote Repositories and Cooperation
    %ul.incremental
      %li 
        cloning a remote repository creates an
        %em origin
      %li you can use multiple protocols (ssh, https, git)
      %li 
        Add the 
        %em remotes
        of the peers you interact with
      %li
        which could be a single central server like with
        %em svn
      %li
        as an Open Source contributor you should have an
        %em Upstream
        remote


%section
  %hgroup
    %h2
      DEMO 3: REMOTES

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      Rewriting History and going back in Time
    %ul
      %li Rebase interactive (git rebase -i HEAD~10)
      %li branch and use
      %pre git reset --hard
      %li
        %em ALERT, you must know what you are doing!

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      Searching The
      %em Codebase
    %ul
      %li Files that match pattern
      %li Changes to a file
      %li Who did what
      %li grep the codebase at lightning speed
      %li Search all commits for a Jira issue
      %li Check if a svn fix has been applied to the production branch
      %li Who and when a piece of code was removed

%section
  %hgroup
    %h2
      DEMO SEARCH SUPERPOWERS

%section
  %hgroup{:style => "margin-top: 80px"}
    %h3
      Interoperability with Subversion
    %ul.incremental
      %li Fasten your seatbelts
      %li This requires you to grasp perfectly well all of the above, and some more
      %li git svn clone
      %li git svn rebase
      %li git svn dcommit

%section
  %hgroup
    %h2
      DEMO SVN INTEROPERABILITY
    
%section
  %h2 Thank you!
  %ul
    %li
      %a{:href => "http://twitter.com/durdn"} @durdn
      on twitter
    %li
      %em aliases
      and the rest of my
      %em
        %a{:href => "https://github.com/durdn/cfg/blob/master/.gitconfig", :target => "_blank"} .gitconfig
      is at 
      %em
        %a{:href => "http://github.com/durdn/cfg"} github
    %li
      All you've seen and more can be found on the redesigned
      %a{:href => "http://git-scm.com/about", :target => "_blank"} git-scm
      website


%section
  %pre
    local branches
    remote branches
    the staging area / index
    the stash
    the power to rewrite history!
    rebase magic

    local branches
    listing commits
    tags and range operations
    rebase to clean up history
    pull vs rebase

    interactivity commit --interactive, rebase --interactive

    A hands on demo on the basic workflow with git
    //-------------------------------------------------------
    basic flow: clone, pull, code, push
    proper flow with feature branch: clone, pull, feature branch, rebase branch, merge master, push
    reset and reset hard
    discarding local changes
    discarding commits in the local branch
    travel back in time with reset --hard


    A hands on demo of interoperability with svn
    A hands on demo of lightweight branch management with git/svn.
    Much needed tips needed for git/svn interoperability


    Footnotes:
    you can find the aliases used in this presentation at:
    https://github.com/durdn/cfg/blob/master/.gitconfig
