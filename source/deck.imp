[overview] scale 10 x 3000 y 1500
[bigtitle] scale 10 x 2450 y 0
# git @ Spindrift

[title] scale 4 x 0 y 800
# who am I?

[] scale 0 x -1000 y 1500
> Nicola Paolucci, 
> [@durdn](http://twitter.com/durdn)
> on twitter, hacker and technology enthusiast, 
> *git evangelist*
> (apparently).

But most importantly: Diablo 3 Player.

[] scale 0 x 0 y 1500
> %strong 15 years 
> of experience in our industry, mainly in development of backend systems, web applications, ATG.

Convinced Philips to switch to subversion to CVS in early 2000s

Hacked a deployment system based on arch (who remembers that?)

I started using git in a real private project in May 2008

More recently I've been fulfilling the role of branch manager (not release manager) at DeliXL during the big production rollout. Using git svn.

[] scale 0 x next y 1500
> Caveats: I use the command line, I would not talk at all about existing graphical clients for win/osx or plugins for Eclipse, though they exist.

[why] scale 4 x next y 800
# Why Git?

[] scale 0 x next y 1500

> A high level overview of the differences and benefits of git compared to other centralized systems

[] scale 0 x next y 1500

> Branching and Merging

- Frictionless Context Switching.
- Role-Based Codelines.
- Feature Based Workflow.
- Disposable Experimentation.

http://git-scm.com/about

[] scale 0 x next y 1500

> git is *fast*

> no, really...

http://chart.apis.google.com/chart?chxt=x&cht=bvs&chl=git|svn&chd=t:0.601,82.843&chds=0,82.843&chs=100x125&chco=E09FA0|E05F49&chf=bg,s,fcfcfa&chtt=Log%20(File)

[] scale 0 x next y 1500

> git is distributed

- Multiple backups
- Any workflow
  - Subversion style workflow
  - Integration manager workflow
  - Dictator And Lieutenants workflow
  - etc.

[] scale 0 x next y 1500

> data assurance

- Cryptographic integrity of every bit of your project.

[] scale 0 x next y 1500

> The Staging Area

http://git-scm.com/images/about/index1.png

- Intermediate area where commits are prepared.
- Ignore this feature adding -a to your commits

 
[base] scale 4 x 0 y 800
# Important Concepts

> Git tracks content, not files
> Snapshots, not differences
> Everything is local

http://git-scm.com/figures/18333fig0104-tn.png
http://git-scm.com/figures/18333fig0105-tn.png

[] scale 0 x next y 1500

> Any file can be in *3* states

- Committed
- Modified
- Staged

http://git-scm.com/figures/18333fig0106-tn.png

[] scale 0 x next y 1500

> File status lifecycle 

http://git-scm.com/figures/18333fig0201-tn.png


[basicsdemo] scale 4 x 0 y 800
# BASICS DEMO

[] scale 0 x next y 1500

> First steps with Git

- git init
- git config
- git add
- git commit
- git status 
- Ignore files in .gitignore
- git diff (--cached)
- git commit
- git rm (--cached)
- git mv
- git log niceties (-10, --oneline, --stat, --graph, --author, --since)

[] scale 0 x next y 1500

> Undoing things, important to learn

- Change the last (local) commit: git commit --amend
- Unstage a file: git reset <file>
- Undo your changes: git checkout <file>


- local branches
- remote branches
- the staging area / index
- the stash
- the power to rewrite history!
- rebase magic

- local branches
- listing commits
- tags and range operations
- rebase to clean up history
- pull vs rebase

- interactivity commit --interactive, rebase --interactive
* low level
     - what is a commit
     - what is a treeish
     - what is a branch


A hands on demo on the basic workflow with git
--------------------------------------------------------
git commands
- basic flow: clone, pull, code, push
- proper flow with feature branch: clone, pull, feature branch, rebase branch, merge master, push
- reset and reset hard
  discarding local changes
  discarding commits in the local branch
  travel back in time with reset --hard


A hands on demo of interoperability with svn
--------------------------------------------------------
A hands on demo of lightweight branch management with git/svn.
--------------------------------------------------------
Much needed tips needed for git/svn interoperability
--------------------------------------------------------


Footnotes:
you can find the aliases used in this presentation at:
https://github.com/durdn/cfg/blob/master/.gitconfig
